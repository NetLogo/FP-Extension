Take
  extensions [fp]
  fp:take 5 (range 10) => [0 1 2 3 4]
  fp:take 5 ["a" "b" "c" "d" "e" "f" "g" "h"] => ["a" "b" "c" "d" "e"]
  fp:take 5 ["a" "b" "c"] => ["a" "b" "c"]
  fp:take 0 ["a" "b" "c"] => []
  fp:take 5 [] => []
  fp:take 1.5 ["a" "b" "c"] => ["a"]
  fp:take -1 [1 2 3] => ERROR Extension exception: First argument must be a positive number.

Drop
  extensions [fp]
  fp:drop 5 (range 10) => [5 6 7 8 9]
  fp:drop 5 ["a" "b" "c" "d" "e" "f" "g" "h"] => ["f" "g" "h"]
  fp:drop 5 ["a" "b" "c"] => []
  fp:drop 0 ["a" "b" "c"] => ["a" "b" "c"]
  fp:drop 5 [] => []
  fp:drop -1.5 [1 2 3] => ERROR Extension exception: First argument must be a positive number.

Scan
  extensions [fp]
  fp:scan [[a b] -> a + b] [1 2 3 4 5] => [1 3 6 10 15]
  fp:scan [[a b] -> a * b] [1 2 3 4 5] => [1 2 6 24 120]
  fp:scan [[a b] -> a] [1 2 3 4 5] => [1 1 1 1 1]
  fp:scan + [1 2 3 4 5] => [1 3 6 10 15]

Iterate
  extensions [fp]
  fp:iterate-last [[a] -> a * 2] 1 5 => 32
  fp:iterate-last [[a] -> (word a "!")] "hey" 5 => "hey!!!!!"
  fp:iterate-last [[a] -> not a] true 5 => false
  fp:iterate [[a] -> a * 2] 1 5 => [1 2 4 8 16 32]
  fp:iterate [[a] -> (word a "!")] "hey" 5 => ["hey" "hey!" "hey!!" "hey!!!" "hey!!!!" "hey!!!!!"]
  fp:iterate [[a] -> not a] true 5 => [true false true false true false]

Compose
  extensions [fp]
  (runresult (fp:compose [x -> x * 2] [x -> x + 2]) 3) => 10
  (runresult (fp:compose [x -> x * 2] [x -> x + 2] [x -> x + 3]) 3) => 16
  (runresult (fp:compose abs abs [x -> x * (-2)]) 3) => 6
  (runresult (fp:compose abs +) -3 2) => 1
  (runresult (fp:compose [x -> first x] [x -> reverse x]) "abcde") => "e"
  (runresult (fp:compose first reverse) "abcde") => "e"
  (runresult (fp:compose [x -> abs x] abs [[x y] -> x + y]) 3 2) => 5
  (runresult (fp:compose [[x y] -> x * y * 2] [x -> x + 2]) 3) => ERROR Extension exception: One or more reporters have invalid number of arguments.

Pipe
  extensions [fp]
  (runresult (fp:pipe [x -> x * 2] [x -> x + 2]) 3) => 8
  (runresult (fp:pipe [x -> x * 2] [x -> x + 2] [x -> x + 3]) 3) => 11
  (runresult (fp:pipe abs abs [x -> x * (-2)]) 3) => -6
  (runresult (fp:pipe + abs) -3 2) => 1
  (runresult (fp:pipe [x -> reverse x] [x -> first x]) "abcde") => "e"
  (runresult (fp:pipe reverse first) "abcde") => "e"
  (runresult (fp:pipe [[x y] -> x * y * 2] [x -> x + 2]) 3 2) => 14
  (runresult (fp:pipe [x -> abs x] abs [[x y] -> x + y]) 3 2) => ERROR Extension exception: One or more reporters have invalid number of arguments.

Curry
  extensions [fp]
  globals [f]
  to-report g [x y z] report x + y + z end
  O> set f (fp:curry g 1)
  (runresult f 2 3) => 6
  (runresult (fp:curry (fp:curry (fp:curry g 1) 2)) 3) => 6
  (runresult (fp:curry [x -> x + 1] 1)) => 2
  (runresult (fp:curry [x -> x + 1] 1 2)) => 2
  (runresult (fp:curry [[x y] -> x + y] 1 2)) => 3

FindIndices
  extensions [fp]
  fp:find-indices [x -> x < 3] [2] => [0]
  fp:find-indices [x -> x = 2] [1 2 1 2] => [1 3]
  fp:find-indices [x -> x < "b"] ["b" "a" "b" "c" "a"] => [1 4]
  fp:find-indices [x -> member? 2 x] [[1 0 3] [2 4 true] [1] [5 5 2]] => [1 3]
  fp:find-indices [x -> x + 1] [1 2 3] => ERROR Extension exception: The reporter does not return a boolean value.

Find
  extensions [fp]
  fp:find [x -> x < 3] [2] => 2
  fp:find [x -> x = 2] [1 2 1 2] => 2
  fp:find [ s -> first s = "t" ] ["hi" "there" "everyone"] => "there"
  fp:find [x -> "yes"] [1 2 3] => ERROR Extension exception: The reporter does not return a boolean value.

Zip
  extensions [fp]
  fp:zip [1 2] [4 5] => [[1 4] [2 5]]
  fp:zip [1 2 3] [4 5 6] => [[1 4] [2 5] [3 6]]
  fp:zip [1 2] [3 4] [5 6] => [[1 3 5] [2 4 6]]
  fp:zip [1 2 3 4] [5 6 7 8] [9 10 11 12] => [[1 5 9] [2 6 10] [3 7 11] [4 8 12]]
  fp:zip [1 2 3 4] [5 6] [9 10 11 12] => [[1 5 9] [2 6 10]]
  fp:zip [1 2 3 4 5] ["a" "b" "c"] => [[1 "a"] [2 "b"] [3 "c"]]

Unzip
  extensions [fp]
  fp:unzip [[1 4] [2 5]] => [[1 2] [4 5]]
  fp:unzip [[1 4] [2 5] [3 6]] => [[1 2 3] [4 5 6]]
  fp:unzip [[1 3 5] [2 4 6]] => [[1 2] [3 4] [5 6]]
  fp:unzip [[1 5 9] [2 6 10] [3 7 11] [4 8 12]] => [[1 2 3 4] [5 6 7 8] [9 10 11 12]]
  fp:unzip [[1 "a"] [2 "b"] [3 "c"] [4]] => [[1 2 3 4] ["a" "b" "c"]]
  fp:unzip [[11 12 13] [21 22 23] [31 32] [41]] => [[11 21 31 41] [12 22 32] [13 23]]
  fp:unzip [[1 2 3 4]] => [[1] [2] [3] [4]]
  fp:unzip [1 2 3 4] => ERROR Extension exception: Input must be a list of lists.

Flatten
  extensions [fp]
  fp:flatten [[1 2 3][4 5]] => [1 2 3 4 5]
  fp:flatten [[[1 [2] 3]][[4 [5]] [6]]] => [1 2 3 4 5 6]
  fp:flatten [1 2 3 4 5 6] => [1 2 3 4 5 6]
  fp:flatten [] => []
  fp:flatten [[] []] => []

Apply
  extensions [fp]
  fp:apply [[a b] -> a + b] [10 5] => 15
  map [l -> fp:apply [[a b] -> a + b] l] [[10 5] [6 8] [9 22]] => [15 14 31]
  map [l -> fp:apply word l] [[1 2 3] [4 5] [6 7 8 9]] => ["123" "45" "6789"]
  fp:apply [[a b] -> a + b] [10] => ERROR Extension exception: The reporter given to `fp:apply` requires at least 2 arguments but the list only has 1 element.
